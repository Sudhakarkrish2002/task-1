import { useState, useRef, useEffect } from 'react'
import { 
  MessageCircle, 
  Send, 
  X, 
  Minimize2, 
  Bot, 
  User,
  ChevronDown,
  ChevronUp,
  Zap,
  BarChart3,
  Smartphone,
  Shield,
  Globe,
  Cpu,
  HelpCircle,
  Clock,
  CheckCircle
} from 'lucide-react'

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef(null)
  const inputRef = useRef(null)

  // Enhanced default questions with more variety
  const defaultQuestions = [
    {
      id: 1,
      text: "How do I get started with creating my first IoT dashboard?",
      category: "Getting Started"
    },
    {
      id: 2,
      text: "What hardware devices are supported? (Arduino, ESP32, Raspberry Pi)",
      category: "Hardware"
    },
    {
      id: 3,
      text: "How secure is the platform and data transmission?",
      category: "Security"
    },
    {
      id: 4,
      text: "Can I build mobile apps without coding experience?",
      category: "Mobile Apps"
    },
    {
      id: 5,
      text: "What analytics and data visualization features are available?",
      category: "Analytics"
    },
    {
      id: 6,
      text: "What are the pricing plans and what's included?",
      category: "Pricing"
    },
    {
      id: 7,
      text: "How do I connect my Arduino or ESP32 device?",
      category: "Hardware"
    },
    {
      id: 8,
      text: "Is there a free trial or free tier available?",
      category: "Pricing"
    },
    {
      id: 9,
      text: "What kind of support do you provide?",
      category: "Support"
    },
    {
      id: 10,
      text: "Can I integrate with existing systems and APIs?",
      category: "Analytics"
    }
  ]

  // Comprehensive Q&A Database
  const qaDatabase = {
    // Getting Started
    gettingStarted: {
      patterns: ['start', 'getting started', 'first dashboard', 'begin', 'setup', 'onboard', 'tutorial', 'guide'],
      response: {
        text: "üöÄ Welcome to IoT Dashboard! Here's how to get started:\n\n**Step 1: Create Account**\n‚Ä¢ Click 'Start Building Free' to sign up\n‚Ä¢ No credit card required for free tier\n‚Ä¢ Get instant access to the platform\n\n**Step 2: Build Your First Dashboard**\n‚Ä¢ Use our drag-and-drop interface\n‚Ä¢ Choose from 50+ pre-built widgets\n‚Ä¢ Customize layouts and themes\n\n**Step 3: Connect Devices**\n‚Ä¢ Use WiFi provisioning for easy setup\n‚Ä¢ Support for Arduino, ESP32, Raspberry Pi\n‚Ä¢ Real-time device monitoring\n\n**Step 4: Deploy & Monitor**\n‚Ä¢ Launch your dashboard instantly\n‚Ä¢ Monitor data in real-time\n‚Ä¢ Share with team members\n\nNeed help with any specific step?",
        quickActions: ["Device connection guide", "Dashboard templates", "Video tutorials", "Contact support"]
      }
    },

    // Hardware Support
    hardware: {
      patterns: ['hardware', 'device', 'arduino', 'esp32', 'raspberry pi', 'microcontroller', 'sensor', 'compatible', 'support'],
      response: {
        text: "üîß **Supported Hardware Platforms:**\n\n**Microcontrollers:**\n‚Ä¢ Arduino (Uno, Nano, Mega, Leonardo)\n‚Ä¢ ESP32/ESP8266 (WiFi + Bluetooth)\n‚Ä¢ STM32 series\n‚Ä¢ Particle devices\n\n**Single Board Computers:**\n‚Ä¢ Raspberry Pi (all models)\n‚Ä¢ BeagleBone Black\n‚Ä¢ Orange Pi\n‚Ä¢ NVIDIA Jetson\n\n**Industrial & Professional:**\n‚Ä¢ PLCs (Siemens, Allen-Bradley)\n‚Ä¢ Industrial gateways\n‚Ä¢ Custom embedded systems\n\n**Connectivity Options:**\n‚Ä¢ WiFi (802.11 b/g/n/ac)\n‚Ä¢ Cellular (2G/3G/4G/5G)\n‚Ä¢ LoRaWAN\n‚Ä¢ Ethernet\n‚Ä¢ Bluetooth\n\n**SDK & APIs:**\n‚Ä¢ REST API for custom integrations\n‚Ä¢ MQTT protocol support\n‚Ä¢ WebSocket for real-time data\n‚Ä¢ Custom SDKs for major platforms\n\nNeed help with a specific device?",
        quickActions: ["Arduino setup guide", "ESP32 tutorial", "Raspberry Pi guide", "Custom integration help"]
      }
    },

    // Security
    security: {
      patterns: ['security', 'encrypt', 'safe', 'secure', 'privacy', 'data protection', 'compliance', 'gdpr'],
      response: {
        text: "üîí **Enterprise-Grade Security:**\n\n**Data Protection:**\n‚Ä¢ AES-256 encryption in transit and at rest\n‚Ä¢ TLS 1.3 for all communications\n‚Ä¢ Zero-knowledge architecture\n‚Ä¢ End-to-end encryption\n\n**Access Control:**\n‚Ä¢ Multi-factor authentication (MFA)\n‚Ä¢ Role-based access control (RBAC)\n‚Ä¢ Single Sign-On (SSO) integration\n‚Ä¢ API key management\n\n**Compliance & Certifications:**\n‚Ä¢ SOC 2 Type II certified\n‚Ä¢ GDPR compliant\n‚Ä¢ ISO 27001 certified\n‚Ä¢ HIPAA ready\n\n**Monitoring & Auditing:**\n‚Ä¢ 24/7 security monitoring\n‚Ä¢ Real-time threat detection\n‚Ä¢ Comprehensive audit logs\n‚Ä¢ Automated security updates\n\n**Infrastructure:**\n‚Ä¢ AWS/Azure cloud hosting\n‚Ä¢ 99.9% uptime SLA\n‚Ä¢ Global CDN with DDoS protection\n‚Ä¢ Regular security assessments\n\nYour data is our top priority!",
        quickActions: ["Security whitepaper", "Compliance documentation", "Privacy policy", "Security audit report"]
      }
    },

    // Mobile Apps
    mobile: {
      patterns: ['mobile', 'app', 'no-code', 'ios', 'android', 'smartphone', 'native app', 'app store'],
      response: {
        text: "üì± **No-Code Mobile App Builder:**\n\n**What You Can Build:**\n‚Ä¢ Native iOS and Android apps\n‚Ä¢ Cross-platform compatibility\n‚Ä¢ Custom branding and themes\n‚Ä¢ Offline functionality\n\n**Features Included:**\n‚Ä¢ Drag-and-drop interface builder\n‚Ä¢ Real-time data synchronization\n‚Ä¢ Push notifications\n‚Ä¢ User authentication\n‚Ä¢ Custom navigation\n\n**Deployment:**\n‚Ä¢ Direct deployment to App Store/Google Play\n‚Ä¢ Enterprise app distribution\n‚Ä¢ Over-the-air updates\n‚Ä¢ Version control\n\n**Development Time:**\n‚Ä¢ Basic app: 30 minutes\n‚Ä¢ Advanced app: 2-4 hours\n‚Ä¢ No coding required\n‚Ä¢ Professional results\n\n**Pricing:**\n‚Ä¢ Free tier: 1 app, basic features\n‚Ä¢ Pro: $19/month - unlimited apps\n‚Ä¢ Enterprise: Custom pricing\n\nReady to build your first app?",
        quickActions: ["App builder demo", "Mobile app examples", "Deployment guide", "App store submission"]
      }
    },

    // Analytics & Visualization
    analytics: {
      patterns: ['analytics', 'visualization', 'chart', 'data', 'dashboard', 'report', 'insights', 'metrics'],
      response: {
        text: "üìä **Advanced Analytics & Visualization:**\n\n**Chart Types:**\n‚Ä¢ Line, bar, pie, and area charts\n‚Ä¢ Real-time gauges and meters\n‚Ä¢ Geographic maps and heatmaps\n‚Ä¢ 3D visualizations\n‚Ä¢ Custom chart widgets\n\n**Data Processing:**\n‚Ä¢ Real-time data streaming\n‚Ä¢ Historical data analysis\n‚Ä¢ Predictive analytics with ML\n‚Ä¢ Custom calculations and formulas\n‚Ä¢ Data aggregation and filtering\n\n**Dashboard Features:**\n‚Ä¢ Drag-and-drop layout builder\n‚Ä¢ Responsive design for all devices\n‚Ä¢ Custom themes and branding\n‚Ä¢ Interactive filters and drill-downs\n‚Ä¢ Scheduled reports and alerts\n\n**Performance:**\n‚Ä¢ Sub-100ms data processing\n‚Ä¢ Handle millions of data points\n‚Ä¢ Real-time updates\n‚Ä¢ Optimized for mobile devices\n\n**Integrations:**\n‚Ä¢ MATLAB integration\n‚Ä¢ Excel/CSV import/export\n‚Ä¢ REST API for custom data\n‚Ä¢ Webhook support\n\nCreate stunning visualizations in minutes!",
        quickActions: ["Analytics demo", "Chart gallery", "Dashboard templates", "Data integration guide"]
      }
    },

    // Pricing
    pricing: {
      patterns: ['cost', 'price', 'pricing', 'free', 'plan', 'subscription', 'billing', 'trial'],
      response: {
        text: "üí∞ **Flexible Pricing Plans:**\n\n**üÜì Free Tier:**\n‚Ä¢ Up to 5 devices\n‚Ä¢ Basic dashboard features\n‚Ä¢ 1 mobile app\n‚Ä¢ Community support\n‚Ä¢ 1GB data storage\n‚Ä¢ Perfect for testing\n\n**üíº Professional - $29/month:**\n‚Ä¢ Up to 50 devices\n‚Ä¢ Advanced analytics\n‚Ä¢ Unlimited dashboards\n‚Ä¢ 5 mobile apps\n‚Ä¢ Email support\n‚Ä¢ 10GB data storage\n‚Ä¢ Custom themes\n\n**üè¢ Enterprise - Custom:**\n‚Ä¢ Unlimited devices\n‚Ä¢ White-label solution\n‚Ä¢ Dedicated support\n‚Ä¢ Custom integrations\n‚Ä¢ On-premise deployment\n‚Ä¢ SLA guarantees\n‚Ä¢ Advanced security\n\n**üéØ Add-ons:**\n‚Ä¢ Additional devices: $2/device/month\n‚Ä¢ Extra storage: $5/10GB/month\n‚Ä¢ Premium support: $99/month\n\n**Special Offers:**\n‚Ä¢ 14-day free trial (no credit card)\n‚Ä¢ Student discount: 50% off\n‚Ä¢ Non-profit discount: 30% off\n‚Ä¢ Annual billing: 20% discount\n\nStart free today!",
        quickActions: ["Start free trial", "View detailed pricing", "Contact sales", "Calculate costs"]
      }
    },

    // Technical Support
    support: {
      patterns: ['help', 'support', 'issue', 'problem', 'bug', 'error', 'troubleshoot', 'contact'],
      response: {
        text: "üõ†Ô∏è **Technical Support Options:**\n\n**Self-Service:**\n‚Ä¢ Comprehensive documentation\n‚Ä¢ Video tutorials and guides\n‚Ä¢ Community forum\n‚Ä¢ Knowledge base with 500+ articles\n‚Ä¢ API documentation\n\n**Support Channels:**\n‚Ä¢ Email support: support@iotdashboard.com\n‚Ä¢ Live chat: Available 9 AM - 6 PM EST\n‚Ä¢ Phone support: +1 (555) 123-4567\n‚Ä¢ Video calls for complex issues\n\n**Response Times:**\n‚Ä¢ Free tier: 48 hours\n‚Ä¢ Professional: 24 hours\n‚Ä¢ Enterprise: 4 hours\n‚Ä¢ Critical issues: 1 hour\n\n**What We Help With:**\n‚Ä¢ Device connectivity issues\n‚Ä¢ Dashboard customization\n‚Ä¢ API integration\n‚Ä¢ Mobile app deployment\n‚Ä¢ Data visualization\n‚Ä¢ Performance optimization\n\n**Resources:**\n‚Ä¢ Getting started guide\n‚Ä¢ Troubleshooting checklist\n‚Ä¢ Best practices documentation\n‚Ä¢ Sample code and examples\n\nHow can I help you today?",
        quickActions: ["Browse documentation", "Contact support", "Community forum", "Schedule a call"]
      }
    },

    // Greetings
    greeting: {
      patterns: ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening', 'greetings'],
      response: {
        text: "üëã Hello! I'm your IoT Dashboard Assistant.\n\nI'm here to help you with everything about our IoT platform:\n\n‚Ä¢ Getting started and setup\n‚Ä¢ Hardware compatibility\n‚Ä¢ Security and compliance\n‚Ä¢ Mobile app development\n‚Ä¢ Analytics and dashboards\n‚Ä¢ Pricing and plans\n‚Ä¢ Technical support\n\nWhat would you like to know? Feel free to ask me anything!",
        quickActions: ["Getting started guide", "Platform overview", "Pricing information", "Contact support"]
      }
    }
  }

  // Enhanced response logic with better pattern matching
  const getBotResponse = (message) => {
    const lowerMessage = message.toLowerCase()
    
    // Check each category for pattern matches
    for (const [category, data] of Object.entries(qaDatabase)) {
      const hasMatch = data.patterns.some(pattern => lowerMessage.includes(pattern))
      if (hasMatch) {
        return data.response
      }
    }
    
    // Default response for unmatched queries
    return {
      text: `I understand you're asking about: "${message}"\n\nI'm here to help with questions about our IoT Dashboard platform. You can ask me about:\n\n‚Ä¢ Getting started and setup\n‚Ä¢ Hardware compatibility (Arduino, ESP32, Raspberry Pi)\n‚Ä¢ Security features and compliance\n‚Ä¢ Mobile app building (no-code)\n‚Ä¢ Analytics and data visualization\n‚Ä¢ Pricing and subscription plans\n‚Ä¢ Technical support and troubleshooting\n\nTry asking something like:\n‚Ä¢ "How do I connect my Arduino?"\n‚Ä¢ "What's included in the free plan?"\n‚Ä¢ "How secure is the platform?"\n‚Ä¢ "Can I build mobile apps without coding?"`,
      quickActions: ["How to get started?", "What devices are supported?", "Is it secure?", "What does it cost?"]
    }
  }

  // Initialize with welcome message
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setMessages([{
        id: 1,
        text: "üëã Welcome to IoT Dashboard Assistant!\n\nI'm here to help you with everything about our IoT platform:\n\nüöÄ **Getting Started** - Setup guides and tutorials\nüîß **Hardware Support** - Arduino, ESP32, Raspberry Pi, and more\nüîí **Security** - Enterprise-grade protection and compliance\nüì± **Mobile Apps** - No-code app builder\nüìä **Analytics** - Advanced data visualization\nüí∞ **Pricing** - Flexible plans for every need\nüõ†Ô∏è **Support** - Technical help and documentation\n\nWhat would you like to know? Feel free to ask me anything!",
        sender: 'bot',
        timestamp: new Date(),
        quickActions: ["Getting started guide", "Hardware compatibility", "Security features", "Pricing plans"]
      }])
    }
  }, [isOpen, messages.length])

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // Focus input when opened
  useEffect(() => {
    if (isOpen && !isMinimized) {
      setTimeout(() => {
        inputRef.current?.focus()
      }, 100)
    }
  }, [isOpen, isMinimized])

  const handleSendMessage = async (message = inputValue) => {
    if (!message.trim()) return

    const userMessage = {
      id: Date.now(),
      text: message,
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)

    // Simulate typing delay
    setTimeout(() => {
      const botResponse = getBotResponse(message)
      const botMessage = {
        id: Date.now() + 1,
        text: botResponse.text,
        sender: 'bot',
        timestamp: new Date(),
        quickActions: botResponse.quickActions
      }
      
      setMessages(prev => [...prev, botMessage])
      setIsTyping(false)
    }, 1000 + Math.random() * 1000)
  }

  const handleQuickAction = (action) => {
    handleSendMessage(action)
  }

  const handleDefaultQuestion = (question) => {
    handleSendMessage(question.text)
  }

  const formatTime = (date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
  }

  const getCategoryIcon = (category) => {
    switch (category) {
      case 'Getting Started': return <Zap className="w-4 h-4" />
      case 'Hardware': return <Cpu className="w-4 h-4" />
      case 'Security': return <Shield className="w-4 h-4" />
      case 'Mobile Apps': return <Smartphone className="w-4 h-4" />
      case 'Analytics': return <BarChart3 className="w-4 h-4" />
      case 'Pricing': return <HelpCircle className="w-4 h-4" />
      default: return <MessageCircle className="w-4 h-4" />
    }
  }

  return (
    <>
      {/* Chat Button */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 w-16 h-16 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 flex items-center justify-center z-50 group transform hover:scale-105"
        >
          <MessageCircle className="w-7 h-7" />
          <div className="absolute -top-1 -right-1 w-5 h-5 bg-green-400 rounded-full flex items-center justify-center shadow-lg">
            <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
          </div>
          <div className="absolute right-20 bg-gray-900 text-white px-4 py-2 rounded-xl text-sm whitespace-nowrap opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-2 group-hover:translate-x-0 shadow-lg">
            <div className="absolute right-0 top-1/2 transform translate-x-1 -translate-y-1/2 w-2 h-2 bg-gray-900 rotate-45"></div>
            Need help? Chat with us!
          </div>
        </button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div className={`fixed bottom-6 right-6 w-96 sm:w-80 md:w-96 bg-white rounded-2xl shadow-2xl border border-gray-100 z-50 transition-all duration-500 transform ${
          isMinimized ? 'h-16 scale-95' : 'h-[600px] scale-100'
        }`}>
          {/* Header */}
          <div className="bg-gradient-to-r from-red-500 to-red-600 text-white p-4 rounded-t-2xl flex items-center justify-between backdrop-blur-sm">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm border border-white/30">
                <Bot className="w-6 h-6" />
              </div>
              <div>
                <h3 className="font-semibold text-lg">IoT Assistant</h3>
                <div className="flex items-center space-x-2 text-sm text-red-100">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse shadow-lg"></div>
                  <span>Online ‚Ä¢ Ready to help</span>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-1">
              <button
                onClick={() => setIsMinimized(!isMinimized)}
                className="p-2 hover:bg-white/20 rounded-full transition-all duration-200 hover:scale-110"
              >
                {isMinimized ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className="p-2 hover:bg-white/20 rounded-full transition-all duration-200 hover:scale-110"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>

          {!isMinimized && (
            <>
              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4 h-[300px] sm:h-[400px] bg-gradient-to-b from-gray-50 to-white chatbot-messages">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} animate-fadeIn`}>
                    <div className={`flex space-x-3 max-w-[85%] ${message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 shadow-lg ${
                        message.sender === 'user' 
                          ? 'bg-gradient-to-r from-red-500 to-red-600 text-white' 
                          : 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-600 border border-gray-200'
                      }`}>
                        {message.sender === 'user' ? <User className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
                      </div>
                      <div className={`rounded-2xl p-4 shadow-sm ${
                        message.sender === 'user'
                          ? 'bg-gradient-to-r from-red-500 to-red-600 text-white'
                          : 'bg-white text-gray-900 border border-gray-100'
                      }`}>
                        <p className="text-sm whitespace-pre-line leading-relaxed">{message.text}</p>
                        <div className={`text-xs mt-2 ${
                          message.sender === 'user' ? 'text-red-100' : 'text-gray-500'
                        }`}>
                          {formatTime(message.timestamp)}
                        </div>
                        
                        {/* Quick Actions */}
                        {message.quickActions && message.sender === 'bot' && (
                          <div className="mt-4 space-y-2">
                            {message.quickActions.map((action, index) => (
                              <button
                                key={index}
                                onClick={() => handleQuickAction(action)}
                                className="block w-full text-left text-xs bg-gray-100 hover:bg-gray-200 rounded-lg px-3 py-2 transition-all duration-200 hover:shadow-sm border border-gray-200"
                              >
                                {action}
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
                
                {/* Typing Indicator */}
                {isTyping && (
                  <div className="flex justify-start animate-fadeIn">
                    <div className="flex space-x-3">
                      <div className="w-10 h-10 rounded-full bg-gradient-to-r from-gray-100 to-gray-200 text-gray-600 flex items-center justify-center shadow-lg border border-gray-200">
                        <Bot className="w-5 h-5" />
                      </div>
                      <div className="bg-white rounded-2xl p-4 shadow-sm border border-gray-100">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              {/* Default Questions */}
              {messages.length <= 1 && (
                <div className="p-4 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-white">
                  <h4 className="text-sm font-semibold text-gray-800 mb-4 flex items-center">
                    <Zap className="w-4 h-4 mr-2 text-red-500" />
                    Quick Questions
                  </h4>
                  <div className="space-y-3">
                    {defaultQuestions.slice(0, 3).map((question) => (
                      <button
                        key={question.id}
                        onClick={() => handleDefaultQuestion(question)}
                        className="w-full text-left p-3 text-sm bg-white hover:bg-gray-50 rounded-xl border border-gray-200 transition-all duration-200 hover:shadow-sm hover:border-red-200 flex items-center space-x-3 group"
                      >
                        <div className="w-8 h-8 bg-red-50 rounded-lg flex items-center justify-center group-hover:bg-red-100 transition-colors">
                        {getCategoryIcon(question.category)}
                        </div>
                        <span className="text-gray-700 group-hover:text-gray-900">{question.text}</span>
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Input */}
              <div className="p-4 border-t border-gray-100 bg-white">
                <div className="flex space-x-3">
                  <input
                    ref={inputRef}
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="Type your message..."
                    className="flex-1 px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent text-sm bg-gray-50 focus:bg-white transition-all duration-200"
                    disabled={isTyping}
                  />
                  <button
                    onClick={() => handleSendMessage()}
                    disabled={!inputValue.trim() || isTyping}
                    className="px-4 py-3 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl hover:from-red-600 hover:to-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      )}
    </>
  )
}

export default ChatBot
